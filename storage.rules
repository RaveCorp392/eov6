rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    function signedIn() { return request.auth != null; }
    function session(code) { return firestore.get(/databases/(default)/documents/sessions/$(code)); }
    function active(code) {
      let d = session(code);
      return d.data.closed != true && (!(d.data.expiresAt is timestamp) || d.data.expiresAt > request.time);
    }
    function validContent() {
      return request.resource.contentType.matches('image/.*') || request.resource.contentType == 'application/pdf';
    }
    function validSize() { return request.resource.size < 10 * 1024 * 1024; }

    match /{path=**} { allow list: if false; }

    match /uploads/{code}/{fileId} {
      allow read: if signedIn();
      allow write: if signedIn() && active(code) && validContent() && validSize();
      allow delete: if false;
    }

    match /sessions/{code}/{filePath=**} {
      allow read: if signedIn();
      allow write: if signedIn() && active(code) && validContent() && validSize();
      allow delete: if false;
    }

    match /{all=**} { allow read, write: if false; }
  }
}
