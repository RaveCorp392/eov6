'use client';import {useEffect,useRef,useState} from 'react';import {useParams} from 'next/navigation';import ChatWindow from '@/components/ChatWindow';import {db,isFirebaseReady} from '@/lib/firebase';import {doc,onSnapshot,setDoc,collection,addDoc,serverTimestamp} from 'firebase/firestore';import {expiryInHours} from '@/lib/code';type Profile={name?:string;email?:string;phone?:string};export default function Caller(){const {code}=useParams<{code:string}>();const using=isFirebaseReady();const[profile,setProfile]=useState<Profile>({name:'',email:'',phone:''});const[sending,setSending]=useState(false);const[sentAt,setSentAt]=useState<number|null>(null);const timer=useRef<any>(null);useEffect(()=>{if(!using)return;const ref=doc(db,'sessions',code);return onSnapshot(ref,snap=>{const p=(snap.data()?.profile)||{};setProfile(cur=>({name:p.name??cur.name??'',email:p.email??cur.email??'',phone:p.phone??cur.phone??''}))})},[code,using]);async function schedule(){if(!using)return;if(timer.current)clearTimeout(timer.current);timer.current=setTimeout(async()=>{await setDoc(doc(db,'sessions',code),{profile,updatedAt:serverTimestamp()},{merge:true})},400)}function update(k:keyof Profile,v:string){setProfile(p=>({...p,[k]:v}));schedule()}async function sendOnce(){if(!using||sending)return;setSending(true);const summary=[profile.name?.trim(),profile.email?.trim(),profile.phone?.trim()].filter(Boolean).join(' Â· ');try{await addDoc(collection(db,'sessions',code,'messages'),{role:'caller',type:'profile',text:summary?`Contact details: ${summary}`:'Contact details shared.',profile,ts:serverTimestamp(),expiresAt:expiryInHours(1)} as any);await setDoc(doc(db,'sessions',code),{status:'identified',profile,lastSharedAt:serverTimestamp(),expiresAt:expiryInHours(1)},{merge:true});setSentAt(Date.now())}finally{setSending(false);setTimeout(()=>setSentAt(null),2500)}}const canSend=Boolean(profile.name?.trim()||profile.email?.trim()||profile.phone?.trim());return(<main className='space-y-3'><div className='rounded-xl border bg-white p-3 text-sm'>ðŸ”’ Ephemeral session <b>{code}</b>. Your details update live for the agent.</div><ChatWindow role='caller' code={code}/><div className='space-y-2'><div className='grid grid-cols-1 gap-2 sm:grid-cols-3'><input className='rounded-xl border px-3 py-2' placeholder='Full name' value={profile.name||''} onChange={e=>update('name',e.target.value)}/><input className='rounded-xl border px-3 py-2' placeholder='Email' type='email' value={profile.email||''} onChange={e=>update('email',e.target.value)}/><input className='rounded-xl border px-3 py-2' placeholder='Phone' type='tel' value={profile.phone||''} onChange={e=>update('phone',e.target.value)}/></div><div className='flex items-center gap-2'><button className='rounded-xl bg-blue-700 px-4 py-2 text-white disabled:opacity-50' onClick={sendOnce} disabled={!canSend||sending}>{sending?'Sendingâ€¦':'Send details to agent'}</button>{sentAt&&<span className='text-sm text-green-700'>Sent âœ”</span>}</div></div><button className='w-full rounded-xl border px-4 py-3'>Leave session</button></main>)}
