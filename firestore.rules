rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------------- Helpers ----------------
    function isSignedIn() { return request.auth != null; }
    function myEmail() {
      return isSignedIn() && request.auth.token.email != null ? lower(request.auth.token.email) : "";
    }

    // Staff gate (soft-launch)
    // - Any @eov6.com address
    // - Specific allowlist (lowercase exact matches)
    function isStaff() {
      return myEmail().endsWith("@eov6.com") ||
             myEmail() in [
               "stephen.mcleish@gmail.com",
               "hello@meetsafe.io"
             ];
    }

    // ---------------- Support tickets ----------------
    match /tickets/{tid} {
      // Public form can create
      allow create: if true;

      // Staff can read all; users can read their own ticket by email
      allow read: if isStaff() || (resource.data.email == myEmail());

      // Only staff may update/close/assign
      allow update, delete: if isStaff();
    }

    // ---------------- Contact form ----------------
    match /contacts/{id} {
      allow create: if
        request.resource.data.keys().hasOnly(['email','name','message','createdAt','source','status']) &&
        request.resource.data.email is string &&
        request.resource.data.name is string &&
        request.resource.data.message is string &&
        request.resource.data.createdAt is int &&
        request.resource.data.email.size() > 0 &&
        request.resource.data.email.size() <= 200 &&
        request.resource.data.name.size() <= 200 &&
        request.resource.data.message.size() <= 4000;

      // No client reads/updates/deletes; admin SDK only if needed
      allow read, update, delete: if false;
    }

    // ---------------- Entitlements (read-only to self) ----------------
    match /entitlements/{email} {
      allow read: if isSignedIn()
                  && request.auth.token.email != null
                  && lower(request.auth.token.email) == email;
      allow create, update, delete: if false;
    }

    // ---------------- Leads (server-only) ----------------
    match /leads/{id} {
      allow read, create, update, delete: if false;
    }

    // ---------------- ORGS (UID roles) ----------------
    match /orgs/{orgId} {

      function isMember() {
        return isSignedIn()
               && exists(/databases/$(database)/documents/orgs/$(orgId)/members/$(request.auth.uid));
      }

      function myRole() {
        return isMember()
               ? get(/databases/$(database)/documents/orgs/$(orgId)/members/$(request.auth.uid)).data.role
               : null;
      }

      function isManager() { return myRole() in ['owner','admin']; }

      // org doc
      allow read: if isMember();
      allow create, update, delete: if isManager();

      match /members/{uid} {
        allow read: if isMember();
        allow create, update, delete: if isManager();
      }

      match /ackTemplates/{ackId} {
        allow read: if isMember();
        allow create, update, delete: if isManager();
      }
    }

    // ---------------- Sessions (MVP posture; tighten post-launch) ----------------
    match /sessions/{code} {

      // Liberal read for demo/onboarding; tighten later to participants only
      allow read: if true;

      // MVP: allow create/update (your UI enforces UI-level constraints)
      allow create, update: if true;
      allow delete: if false;

      // Messages
      match /messages/{msgId} {
        allow read: if true;

        allow create: if
          request.resource.data.role in ['caller','agent','system'] &&
          request.resource.data.type in ['text','system','file','ack'] &&
          request.resource.data.text is string &&
          request.resource.data.text.size() <= 4000 &&
          // file needs url
          (request.resource.data.type != 'file'
            || (request.resource.data.url is string && request.resource.data.url.size() > 0)) &&
          // optional maps typed
          (!('orig' in request.resource.data) || (
            request.resource.data.orig is map &&
            (!('text' in request.resource.data.orig) || request.resource.data.orig.text is string) &&
            (!('lang' in request.resource.data.orig) || request.resource.data.orig.lang is string)
          )) &&
          (!('lang' in request.resource.data) || (
            request.resource.data.lang is map &&
            (!('src' in request.resource.data) || request.resource.data.lang.src is string) &&
            (!('tgt' in request.resource.data) || request.resource.data.lang.tgt is string)
          )) &&
          (!('meta' in request.resource.data) || (
            request.resource.data.meta is map &&
            (!('translated' in request.resource.data.meta) || request.resource.data.meta.translated is bool)
          ));

        allow update, delete: if false;
      }

      // Caller/agent details
      match /details/{docId} {
        allow read: if true;
        allow create, update: if
          request.resource.data.keys().hasOnly(['name','email','phone','notes','updatedAt']) &&
          (!('name'  in request.resource.data) || request.resource.data.name  is string) &&
          (!('email' in request.resource.data) || request.resource.data.email is string) &&
          (!('phone' in request.resource.data) || request.resource.data.phone is string) &&
          (!('notes' in request.resource.data) || request.resource.data.notes is string);
        allow delete: if false;
      }
    }

    // ---------------- (Post-launch hardening) ----------------
    // - Restrict sessions/messages reads/writes to participants
    // - Require closed==false on writes
    // - Add Cloud Functions to clean expired sessions, scan files, etc.
  }
}
