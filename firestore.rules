rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() { return request.auth != null; }
    function sessionDoc(code) { return get(/databases/$(database)/documents/sessions/$(code)); }
    // broad participant check for MVP – agent/caller/owner all OK
    function isAgent() { return isSignedIn() && (request.auth.token.role in ['agent','admin','owner']); }
    function isCallerFor(code) { return isSignedIn() && request.auth.token.sessionCode == code; }
    function isOwner(code) {
      return isSignedIn() && (
        sessionDoc(code).data.ownerUid     == request.auth.uid ||
        sessionDoc(code).data.agentUid     == request.auth.uid ||
        sessionDoc(code).data.createdByUid == request.auth.uid ||
        sessionDoc(code).data.creatorUid   == request.auth.uid ||
        sessionDoc(code).data.createdBy    == request.auth.uid
      );
    }
    function participant(code) { return isAgent() || isCallerFor(code) || isOwner(code); }
    function active(code) {
      let d = sessionDoc(code);
      return d.data.closed != true && (!(d.data.expiresAt is timestamp) || d.data.expiresAt > request.time);
    }

    match /{document=**} { allow read, write: if false; }

    match /sessions/{code} {
      allow read: if participant(code);
      allow create: if isSignedIn();
      allow update: if participant(code) && active(code);
      allow delete: if false;

      // messages (append-only—kept explicit)
      match /messages/{id} {
        allow read:   if participant(code);
        allow create: if participant(code) && active(code)
          && request.resource.data.keys().hasAll(['role','type','createdAt'])
          && (request.resource.data.type in ['text','file','details','system'])
          && request.resource.data.size() <= 4096;
        allow update, delete: if false;
      }

      // CATCH-ALL for ALL other subcollections under a session
      // (details, profile, fields, acks, events, notes, slots, etc.)
      match /{sub=**}/{doc} {
        allow read:   if participant(code);
        allow create: if participant(code) && active(code);
        allow update: if participant(code) && active(code);
        allow delete: if false;
      }
    }

    // org header + org-scoped templates (read-only)
    match /orgs/{orgId}                       { allow read: if isSignedIn(); allow write: if false; }
    match /orgs/{orgId}/{coll=policies}/{id}  { allow read: if isSignedIn(); allow write: if false; }
    match /orgs/{orgId}/{coll=policy}/{id}    { allow read: if isSignedIn(); allow write: if false; }
    match /orgs/{orgId}/{coll=acks}/{id}      { allow read: if isSignedIn(); allow write: if false; }
    match /orgs/{orgId}/{coll=ackTemplates}/{id} { allow read: if isSignedIn(); allow write: if false; }

    // top-level templates (read-only)
    match /policies/{id}      { allow read: if true; allow write: if false; }
    match /policy/{id}        { allow read: if true; allow write: if false; }
    match /ackTemplates/{id}  { allow read: if true; allow write: if false; }

    // admin logs locked
    match /jobs/{doc=**} { allow read, write: if false; }
  }
}
