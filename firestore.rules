rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // -------- helpers ----------
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return isSignedIn() && request.auth.token.admin == true; }
    function myEmail() {
      return isSignedIn() && request.auth.token.email != null ? lower(request.auth.token.email) : "";
    }
    function isStaff() { return myEmail().endsWith("@eov6.com"); }

    // -------- support tickets -------
    match /tickets/{tid} {
      allow create: if true;
      allow read: if isStaff() || (lower(resource.data.email) == myEmail());
      allow update, delete: if isStaff();
    }

    // -------- contact form -------
    match /contacts/{id} {
      allow create: if
        request.resource.data.keys().hasOnly(['email','name','message','createdAt','source','status']) &&
        request.resource.data.email is string &&
        request.resource.data.name is string &&
        request.resource.data.message is string &&
        request.resource.data.createdAt is int &&
        request.resource.data.email.size() > 0 &&
        request.resource.data.email.size() <= 200 &&
        request.resource.data.name.size() <= 200 &&
        request.resource.data.message.size() <= 4000;
      allow read, update, delete: if isAdmin();
    }

    // -------- entitlements (read-only to self) -------
    match /entitlements/{email} {
      allow read: if isSignedIn()
                  && request.auth.token.email != null
                  && lower(request.auth.token.email) == email;
      allow create, update, delete: if false;
    }

    // -------- orgs + members (UID roles) -------
    match /orgs/{orgId} {
      function isMember() {
        return isSignedIn() && exists(/databases/$(database)/documents/orgs/$(orgId)/members/$(request.auth.uid));
      }
      function myRole() {
        return isMember() ? get(/databases/$(database)/documents/orgs/$(orgId)/members/$(request.auth.uid)).data.role : null;
      }
      function isManager() { return myRole() in ['owner','admin']; }

      // Reads restricted to members (open up if you need public fields)
      allow read: if isMember();
      // Writes only for managers
      allow create, update, delete: if isManager();

      match /members/{uid} {
        allow read: if isMember();
        allow create, update, delete: if isManager();
      }

      // Optional legacy subcollection
      match /ackTemplates/{ackId} {
        allow read: if isMember();
        allow create, update, delete: if isManager();
      }
    }

    // -------- sessions (middle setting for dev/pilot) -------
    // Everyone can read. Creates allowed for messages with a constrained schema.
    match /sessions/{code} {
      // Read the session doc (liberal for demo)
      allow read: if true; // TODO: restrict to participants

      // Writes allowed only if not closed and caller is a participant or admin (MVP)
      function isParticipant() {
        return request.auth != null && (
          request.auth.token.admin == true ||
          request.resource.data.participants[request.auth.uid] == true ||
          resource.data.participants[request.auth.uid] == true
        );
      }
      allow create, update: if isParticipant() && (('closed' in resource.data) ? resource.data.closed != true : true);
      allow delete: if false;

      // Messages subcollection
      match /messages/{msgId} {
        allow read: if true; // TODO: restrict to participants
        allow create: if
          (('closed' in get(/databases/$(database)/documents/sessions/$(code)).data) ? get(/databases/$(database)/documents/sessions/$(code)).data.closed != true : true) &&
          request.resource.data.role in ['caller','agent','system'] &&
          request.resource.data.type in ['text','system','file','details','ack'] &&
          request.resource.data.text is string &&
          request.resource.data.text.size() <= 4000 &&
          (request.resource.data.type != 'file'
             || (request.resource.data.url is string && request.resource.data.url.size() > 0)) &&
          (!('orig' in request.resource.data) || (
            request.resource.data.orig is map &&
            (!('text' in request.resource.data.orig) || request.resource.data.orig.text is string) &&
            (!('lang' in request.resource.data.orig) || request.resource.data.orig.lang is string)
          )) &&
          (!('lang' in request.resource.data) || (
            request.resource.data.lang is map &&
            (!('src' in request.resource.data.lang) || request.resource.data.lang.src is string) &&
            (!('tgt' in request.resource.data.lang) || request.resource.data.lang.tgt is string)
          )) &&
          (!('meta' in request.resource.data) || (
            request.resource.data.meta is map &&
            (!('translated' in request.resource.data.meta) || request.resource.data.meta.translated is bool)
          ));
        allow update, delete: if false;
      }

      // Caller details (name/email/phone/notes)
      match /details/{docId} {
        allow read: if true;
        allow create, update: if
          request.resource.data.keys().hasOnly(['name','email','phone','notes','updatedAt']) &&
          (!('name' in request.resource.data) || request.resource.data.name is string) &&
          (!('email' in request.resource.data) || request.resource.data.email is string) &&
          (!('phone' in request.resource.data) || request.resource.data.phone is string) &&
          (!('notes' in request.resource.data) || request.resource.data.notes is string);
        allow delete: if false;
      }
    }
  }
}


