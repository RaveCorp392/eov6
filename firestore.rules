// EOV6 Firestore rules — “middle” security suitable for MVP
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- helpers ----------
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return isSignedIn() && request.auth.token.admin == true; }

    // ---------- contact form ----------
    match /contacts/{id} {
      allow create: if
        request.resource.data.keys().hasOnly(['email','name','message','createdAt','source','status']) &&
        request.resource.data.email is string &&
        request.resource.data.name is string &&
        request.resource.data.message is string &&
        request.resource.data.createdAt is int &&
        request.resource.data.email.size() > 0 &&
        request.resource.data.email.size() <= 200 &&
        request.resource.data.name.size() <= 200 &&
        request.resource.data.message.size() <= 4000;
      allow read, update, delete: if isAdmin();
    }

    // ---------- entitlements (server-only writes) ----------
    match /entitlements/{email} {
-  allow read: if isSignedIn()
-              && request.auth.token.email != null
-              && lower(request.auth.token.email) == email;
+  allow read: if isSignedIn()
+              && request.auth.token.email != null
+              && request.auth.token.email == email;
   allow create, update, delete: if false;
}

    }

    // ---------- orgs / members ----------
    match /orgs/{orgId} {
      allow read: if true;                  // tighten later if desired
      allow write: if isAdmin();

      match /members/{uid} {
        allow read: if true;                // roster is not sensitive here
        allow write: if isAdmin();          // only admins manage members
      }
    }

    // ---------- sessions ----------
    // MVP: public read, controlled writes
    match /sessions/{code} {
      allow read: if true;

      // Clients create sessions from the app (MVP). Tighten later if needed.
      allow create: if true;

      // Allow only specific root-field updates from clients:
      // - consent (caller accepting)
      // - ackRequest (agent sets or caller clears)
      allow update: if request.resource.data.diff(resource.data)
                        .changedKeys()
                        .hasOnly(['consent','ackRequest']);

      // Caller/agent profile & notes live here; OK to edit from either side.
      match /details/{docId} {
        allow read: if true;
        allow write: if true;
      }

      // Chat messages
      match /messages/{msgId} {
        allow read: if true;

        // Create allowed if:
        //  - consent accepted, OR
        //  - system message (e.g., ack accepted), OR
        //  - admin
        allow create: if
          (get(/databases/$(database)/documents/sessions/$(code)).data.consent.accepted == true)
          || (request.resource.data.type == 'system')
          || isAdmin();

        // No client updates/deletes to messages
        allow update, delete: if false;
      }
    }
  }
}
