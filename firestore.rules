rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // -------- helpers (unchanged) --------
    function isAgent() {
      return request.auth != null &&
             (request.auth.token.role in ['agent','admin','owner']);
    }
    function isCallerFor(code) {
      return request.auth != null && request.auth.token.sessionCode == code;
    }
    function isParticipant(code) { return isAgent() || isCallerFor(code); }
    function sessionDoc(code) { return get(/databases/$(database)/documents/sessions/$(code)); }
    function isActive(code) {
      let d = sessionDoc(code);
      let closed = (d.data.closed == true);
      let notExpired = !(d.data.expiresAt is timestamp) || (d.data.expiresAt > request.time);
      return !closed && notExpired;
    }

    // Default deny
    match /{document=**} { allow read, write: if false; }

    // -------- sessions subtree (unchanged) --------
    match /sessions/{code} {
      allow read: if isParticipant(code);
      allow create: if isAgent();
      allow update: if isParticipant(code) && isActive(code);
      allow delete: if false;

      match /messages/{id} {
        allow read: if isParticipant(code);
        allow create: if isParticipant(code) && isActive(code)
          && request.resource.data.keys().hasAll(['role','type','createdAt'])
          && (request.resource.data.type in ['text','file','details','system'])
          && request.resource.data.size() <= 4096;
        allow update, delete: if false;
      }
      match /fields/{field}     { allow read: if isParticipant(code); allow create, update: if isParticipant(code) && isActive(code); allow delete: if false; }
      match /details/{docId}    { allow read: if isParticipant(code); allow create, update: if isParticipant(code) && isActive(code); allow delete: if false; }
      match /profile/{docId}    { allow read: if isParticipant(code); allow create, update: if isParticipant(code) && isActive(code); allow delete: if false; }
    }

    // -------- NEW: agent console reads --------
    // Org/plan panels in the agent header
    match /orgs/{orgId}             { allow read: if isAgent(); allow write: if false; }
    match /entitlements/{docId}     { allow read: if isAgent(); allow write: if false; }

    // If your code reads membership records or org lookups, unblock read-only:
    match /memberships/{docId}      { allow read: if isAgent(); allow write: if false; }
    match /orgResolver/{docId}      { allow read: if isAgent(); allow write: if false; } // optional: e.g. org-resolver cache

    // Privacy / policy / ack text the app displays to callers & agents
    match /policies/{docId}         { allow read: if true;  allow write: if false; }
    match /policy/{docId}           { allow read: if true;  allow write: if false; }
    match /acks/{docId}             { allow read: if true;  allow write: if false; }
    match /ackTemplates/{docId}     { allow read: if true;  allow write: if false; }

    // Admin/cron logs stay server-only
    match /jobs/{doc=**}            { allow read, write: if false; }
  }
}
